parameters:
  env(X_HTTP_REQUEST_ID): ''
  restfulBundle.requestId: '%env(X_HTTP_REQUEST_ID)%'
services:
  # default configuration for services in *this* file
  _defaults:
    # automatically injects dependencies in your services
    autowire: true
    # automatically registers your services as commands, event subscribers, etc.
    autoconfigure: true
    # this means you cannot fetch services directly from the container via $container->get()
    # if you need to do this, you can override this setting on individual services
    public: true

  # makes classes in src/ available to be used as services
  # this creates a service per class whose id is the fully-qualified class name
  RestfulBundle\:
    resource: '../../*'
    exclude: '../../{DependencyInjection}'

  RestfulBundle\Service\RequestTracker:
    arguments:
      $requestId: '%restfulBundle.requestId%'

  RestfulBundle\Monolog\Processor\RequestIdentifierProcessor:
    arguments:
      $requestId: '%restfulBundle.requestId%'
    tags:
      - { name: monolog.processor }

  RestfulBundle\EventListener\ExceptionListener:
    arguments:
      $logger: '@monolog.logger.main'
      $requestId: '%restfulBundle.requestId%'
    tags:
      - { name: kernel.event_listener, event: kernel.exception }